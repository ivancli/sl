<?php

/**
 * Created by PhpStorm.
 * User: ivan.li
 * Date: 2/14/2017
 * Time: 10:44 AM
 */
namespace App\Validators\Product\Product;

use App\Validators\ValidatorAbstract;

class StoreValidator extends ValidatorAbstract
{

    /**
     * Insert new rule method to validator
     *
     * @param array $data
     * @param bool $throw
     * @return bool|\Illuminate\Support\MessageBag
     */
    public function validate(array $data, $throw = true)
    {
        $this->validator->extendImplicit('unique_per_category', function ($message, $value, $parameters) use ($data) {
            $builder = auth()->user()->products();
            if (isset($data['category_id'])) {
                $builder->where('category_id', $data['category_id']);
            }
            $currentProductNames = $builder->get()->map->product_name->all();
            return !in_array($value, $currentProductNames);
        });
        return parent::validate($data, $throw); // TODO: Change the autogenerated stub
    }

    /**
     * Get pre-set validation rules
     *
     * @param null $id
     * @return array
     */
    protected function getRules($id = null)
    {
        return [
            'product_name' => 'required|max:255|unique_per_category',
            'meta.brand' => 'max:255',
            'meta.supplier' => 'max:255',
            'meta.sku' => 'max:255',
            'meta.cost_price' => 'numeric|nullable',
        ];
    }
}